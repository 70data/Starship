---
apiVersion: v1
kind: Namespace
metadata:
  name: skaffold-tricorder
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: skaffold-tricorder
spec:
  replicas: 1
  selector:
    matchLabels:
      name: postgres
  template:
    metadata:
      labels:
        name: postgres
    spec:
      containers:
        - name: postgres
          image: postgres
          imagePullPolicy: IfNotPresent
          env:
           - name: POSTGRES_PASSWORD
             value: password
          ports:
            - containerPort: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: skaffold-tricorder
spec:
  type: ClusterIP
  selector:
    name: postgres
  ports:
    - protocol: "TCP"
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: skaffold-tricorder
spec:
  replicas: 1
  selector:
    matchLabels:
      name: api-server
  template:
    metadata:
      labels:
        name: api-server
    spec:
      containers:
        - name: api-server
          image: public.ecr.aws/tricorder/api-server
          args: ["--pg_url=postgresql://postgres:password@postgres-service:5432"]
          # Need to be this to allow minikube to not pull from remote registry.
          # Minikube can pre-load images to docker's local registry, this allows
          # minikube+skaffold to use local images.
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 50051
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: api-server-grpc-service
  namespace: skaffold-tricorder
spec:
  type: ClusterIP
  selector:
    name: api-server
  ports:
    - protocol: "TCP"
      port: 50051
      targetPort: 50051
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: default-admin
  namespace: skaffold-tricorder
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: default
  # Change to the namespace used in your deployment.
  namespace: skaffold-tricorder
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: agent
  namespace: skaffold-tricorder
spec:
  selector:
    matchLabels:
      name: agent
  template:
    metadata:
      labels:
        name: agent
    spec:
      # Required to get consistent and universal PIDs on the host environment
      hostPID: true
      volumes:
      - name: sys
        hostPath:
          # Required by BCC (usage unclear, need more investigation)
          path: /sys
          type: Directory
      - name: docker-sock
        hostPath:
          # Allow running docker inside the container for debugging host
          # container environment
          path: /var/run
          type: Directory
      - name: lib-modules
        hostPath:
          # Required by BCC to access installed kernel headers
          path: /lib/modules
          type: Directory
      - name: usr-src
        hostPath:
          # /lib/modules symlinks to this directory
          path: /usr/src
          type: Directory
      - name: host-root
        hostPath:
          # mount / 
          path: /
          type: Directory
      containers:
        - name: tricorder
          image: public.ecr.aws/tricorder/agent
          args:
            - --module_deployer_address=api-server-grpc-service:50051
            # PG username is 'postgres' by default, password is in the above postgres environment 'POSTGRES_PASSWORD'
            # Database name is also 'postgres' by default
            - --pg_url=postgresql://postgres:password@postgres-service:5432
            # Corresponds to the sys volume mount below
            - --host_sys_root_path=/host/sys
          imagePullPolicy: IfNotPresent
          securityContext:
            # Required to run eBPF programs
            privileged: true
          volumeMounts:
          - name: docker-sock
            mountPath: /var/run
          - name: sys
            mountPath: /host/sys
            readOnly: true
          - name: lib-modules
            mountPath: /lib/modules
            readOnly: true
          - name: usr-src
            mountPath: /usr/src
            readOnly: true
          - name: host-root
            mountPath: /host
            readOnly: true
          env:
          # Inject outer-scope hostname into container, so the agent can use
          # this to filter out updates not relevant to this node from
          # the K8s API server.
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
